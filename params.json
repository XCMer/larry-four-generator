{"name":"Larry Four","tagline":"Laravel Four Generator","body":"If you are not already familiar, I had released a generator for Laravel called <a href=\"https://github.com/XCMer/larry-laravel-generator\">Larry</a>. This version is intended to work with Laravel 4, while supporting new features like polymorphic relations.\r\n\r\nLarry Four has been re-written from scratch for Laravel 4. We have a better syntax that allows more flexibility and room for adding in more features.\r\n\r\n## A bird's eye view\r\n\r\nHere's how an input to larry would look:\r\n\r\n    User users; hm Post; mo Image imageable; btm Role;\r\n        id increments\r\n        timestamps\r\n        username string 50; default \"hello world\"; nullable;\r\n        password string 64\r\n        email string 250\r\n        type enum admin, moderator, user\r\n\r\n    Post; mm Image imageable;\r\n        timestamps\r\n        title string 250\r\n        content text\r\n        rating decimal 5 2\r\n\r\n    Image\r\n        filename string\r\n\r\n    Role\r\n        name string\r\n        level integer\r\n\r\nIn the above case, Larry would do the following:\r\n\r\n- Create migration files for all the tables required, along with all the columns. Larry automatically figures out which foreign key columns to add, depending on the relations you define. Pivot table in case of belongsToMany relation is also automatically created.\r\n- Create model files for all the models defined. These models also have relational functions automatically defined in them.\r\n\r\n\r\n## Installation\r\n\r\nLarry is still in beta. You can visit <a href=\"https://packagist.org/packages/raahul/larryfour\">Packagist</a> to check the latest version of Larry Four. Currently, it is `1.0.0beta2`.\r\n\r\nHere are the steps:\r\n\r\n- Put the following in your composer.json: `\"raahul/larryfour\": \"v1.0.0beta2\"`\r\n- Run `composer update`\r\n- Add `'Raahul\\LarryFour\\LarryFourServiceProvider'` to the `providers` array of `app/config/app.php`\r\n\r\n## Usage\r\n\r\nOnce you've successfully installed Larry Four, its commands should be accessible via `artisan`. You can always type just `php artisan` to see all available commands, and those available under the `larry` namespace.\r\n\r\nLarry Four supports three commands.\r\n\r\n    php artisan larry:generate <input_file>\r\n\r\nThe above command takes `<input_file>` as the input, and generates models and migrations based on that. You have to provide a filename that exists at the root of your Laravel 4 installation, wherein artisan itself resides.\r\n\r\nYou cannot provide absolute paths for the input file yet. If you're providing a relative path instead of a filename, then it is relative to Laravel's root directory (or basepath).\r\n\r\nThere are two other commands:\r\n\r\n    // Generate only migrations, not models\r\n    php artisan larry:migrations <input_file>\r\n\r\n    // Generate only models, not migrations\r\n    php artisan larry:models <input_file>\r\n\r\n## Syntax reference\r\n\r\nCreate a new text file at the root of your Laravel installation, and you can name it anything you want. The input file basically defines the following things:\r\n\r\n- All the models that should be created\r\n- The relationship between those models\r\n- The fields inside each of those models\r\n- Modifiers to the fields like default values, nullable/unsigned, and indices\r\n\r\nAll the models get an auto-incrementing primary key called `id`. You can override the name of the primary key. All foreign keys created are unsigned.\r\n\r\nLarry provides ways to override foreign key and pivot table names as well. These are optional. By default, Larry follows the same convention as Laravel for naming tables, pivot tables, and foreign keys.\r\n\r\nFinally, Larry ignores blank lines (even if they contain whitespace). So, you're free to beautify the looks of your input.\r\n\r\nNow, let's begin with the syntax.\r\n\r\n### Model definition\r\n\r\nModel definition is how you tell Larry about a new model that has to be created. Since fields need a model to be added to, a model definition will be the first logical line of your input file.\r\n\r\nWhen defining a new model, the line **should not** be indented by any amount of whitespace.\r\n\r\nThe most simple model definition would look like this:\r\n\r\n    User\r\n\r\nAll models will automatically get an `id` field of type `increments`. Apart from just defining the model, you can also define relations between models on this line.\r\n\r\n    User users; hm Post; mo Image imageable; btm Role;\r\n\r\nIn the above case, we specify the relation that the user has with the other models. The types of the relations supported are:\r\n\r\n    hm: hasMany\r\n    ho: hasOne\r\n    btm: belongToMany\r\n    mm: morphMany\r\n    mo: morphOne\r\n\r\nNotice that you can't specify `belongsTo` and `morphTo` relations. They are added automatically to the concerned model when their inverses, `hasMany, hasOne, morphMany, morphOne`, are specified in a related model.\r\n\r\n#### Semicolons\r\n\r\nWhen defining related models, each definition is delimited by a semicolon. The final semicolon is optional.\r\n\r\n\r\n#### Overriding table name\r\n\r\nYou can override the table name of the current model by simply adding it after the model name.\r\n\r\n    User my_users; hm Post\r\n\r\nThe generated model and migration will take this into account.\r\n\r\n\r\n#### Overriding foreign key and pivot table names\r\n\r\nWhile specifying relations above, you can override the foreign key used. This can be done as:\r\n\r\n    User; hm Post my_user_id;\r\n\r\nIn the above case, the foreign key `my_user_id` will be used instead of the conventional `user_id`. Larry takes care of the naming in the migrations, as well as overriding the default foreign key in the model's relation function.\r\n\r\nIn case of `belongsToMany`, you can override the pivot table name:\r\n\r\n    // pivot table will be named \"r_u\" instead of the\r\n    // conventional role_user\r\n    User; btm Role r_u;\r\n\r\nAnd also the foreign keys inside the pivot table:\r\n\r\n    // foreign keys are named \"u_id\" & \"r_id\" instead of\r\n    // the conventional \"user_id\" & \"role_id\"\r\n    User; btm Role r_u u_id r_id;\r\n\r\nFor polymorphic relations (`morphOne` and `morphMany`), it is mandatory to specify a second paramater to the relation, indicating the name of the polymorphic function:\r\n\r\n    User; mm Image imageable;\r\n\r\n\r\n### Field definition\r\n\r\nAfter you define a model, you need to define fields for it.\r\n\r\n    User users; hm Post; mo Image imageable;\r\n        id increments\r\n        timestamps\r\n        username string 50; default \"hello world\"; nullable;\r\n        password string 64\r\n        email string 250\r\n        type enum admin, moderator, user\r\n\r\nLooking above, you'll get a good idea of how fields are defined. The syntax is as follows:\r\n\r\n    <field_name> <field_type> <field_parameters>; <field_modifier>; <field_modifier> ...\r\n\r\n- The `<field_name>` is simply the column name.\r\n- The `<field_type>` is any of the field types supported by Laravel.\r\n- `<field_parameters>` are additional parameters to a field function, like length of a string.\r\n- `<field_modifier>` includes default, nullable, unsigned , and indices. Multiple field modifiers can be specified for a field.\r\n\r\n**Below are certain points to note:**\r\n\r\nThe `increments` field is optional, and you should have a need to specify it only if you want your auto-incrementing field to be named differently from `id`.\r\n\r\nThe `timestamps` field is special, for it has no field name. By default, timestamps are disabled in all the models, and migrations don't create columns for them. By adding `timestamps` as a field, you enable it for that model, and the migration will contain the necessary columns.\r\n\r\nAnother field that has a different syntactical nuance is the `enum` field. The parameters to the enum fields are separated by commas. They may or may not be individually enclosed in quotes, like:\r\n\r\n    type enum \"admin\", \"moderator\", \"user\"\r\n    OR\r\n    type enum admin, moderator, user\r\n\r\nOther types work as expected, and have syntax similar to the `string` type you see above.\r\n\r\nThe following field types are supported:\r\n\r\n    increments\r\n    string\r\n    integer\r\n    bigInteger\r\n    smallInteger\r\n    float\r\n    decimal\r\n    boolean\r\n    date\r\n    dateTime\r\n    time\r\n    timestamp\r\n    text\r\n    binary\r\n    enum\r\n\r\nAnd the following field modifiers are supported:\r\n\r\n    default \"value\"\r\n    nullable\r\n    unsigned\r\n    primary\r\n    fulltext\r\n    unique\r\n    index\r\n\r\n\r\n## Error handling\r\n\r\nLarry Four has an improved error handling mechanism. If there are syntax errors in your input file, you will be notified about it along with the line number. The error will tell you exactly what's wrong in plain English.\r\n\r\nCurrently, Larry can detect the following errors:\r\n\r\n- Typo in relationship types (typing `hms` instead of `hm` will yield an error)\r\n- Insufficient parameters to relationships or field definitions\r\n- Non-existance of a model that was specified as related in another model\r\n- Invalid field types\r\n\r\n## Testing\r\n\r\nThe repo contains PHPUnit tests. This should keep the bugs out and also expedite feature releases.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}